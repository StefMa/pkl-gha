/// Actions for managing cache in GitHub workflows.
/// This module is a low-level module not indended for direct use.
/// Use the [Action](../Action) module instead to access these actions.
module com.github.action.actions.Cache

import "../Workflow.pkl"

/// Type-safe GitHub Action of the [cache](https://github.com/actions/cache) action.
class Cache extends Workflow.TypedStep {
  fixed uses: "actions/cache@v4"
  with: CacheInputs?
}

class CacheInputs {
  /// A list of files, directories, and wildcard patterns to cache and restore
  ///
  /// Each entry should be separated by newlines.
  ///
  /// Example:
  ///
  /// ```
  /// path =
  ///   """
  ///   path/to/dependencies
  ///   some/other/dependencies
  ///   """
  /// ```
  path: String

  /// An explicit key for restoring and saving the cache
  key: String

  /// An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache
  /// hit occurred for key.
  ///
  /// Note `cache-hit` returns false in this case.
  `restore-keys`: String?

  /// The chunk size used to split up large files during upload, in bytes
  `upload-chunk-size`: Int?

  /// An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved
  /// respectively on other platforms
  enableCrossOsArchive: Boolean?

  /// Fail the workflow if cache entry is not found
  `fail-on-cache-miss`: Boolean?

  /// Check if a cache entry exists for the given input(s) ([key], [restoreKeys]) without downloading the cache.
  `lookup-only`: Boolean?

  /// Run the post step to save the cache even if another step before fails
  `save-always`: Boolean?
}

/// Type-safe GitHub Action of the [cache/save](https://github.com/actions/cache/tree/main/save) action.
class Save extends Workflow.TypedStep {
  fixed uses: "actions/cache/save@v4"
  with: SaveInputs?
}

class SaveInputs {
  /// A list of files, directories, and wildcard patterns to cache and restore
  ///
  /// Each entry should be separated by newlines.
  ///
  /// Example:
  ///
  /// ```
  /// path =
  ///   """
  ///   path/to/dependencies
  ///   some/other/dependencies
  ///   """
  /// ```
  path: String

  /// An explicit key for saving the cache
  key: String

  /// The chunk size used to split up large files during upload, in bytes.
  `upload-chunk-size`: Int?

  /// An optional boolean when enabled, allows windows runners to save caches that can be restored on other platforms.
  enableCrossOsArchive: Boolean?
}

/// Type-safe GitHub Action of the [cache/save](https://github.com/actions/cache/tree/main/restore) action.
class Restore extends Workflow.TypedStep {
  fixed uses: "actions/cache/restore@v4"
  with: RestoreInputs
}

class RestoreInputs {
  /// A list of files, directories, and wildcard patterns to restore
  ///
  /// Each entry should be separated by newlines.
  ///
  /// Example:
  ///
  /// ```
  /// path =
  ///   """
  ///   path/to/dependencies
  ///   some/other/dependencies
  ///   """
  /// ```
  path: String

  /// An explicit key for restoring the cache
  key: String

  /// An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache
  /// hit occurred for key.
  ///
  /// Note `cache-hit` returns false in this case.
  `restore-keys`: Boolean?

  /// An optional boolean when enabled, allows windows runners to restore caches that were saved on other platforms.
  enableCrossOsArchive: Boolean?

  /// Fail the workflow if cache entry is not found.
  `fail-on-cache-miss`: Boolean?

  /// Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache.
  `lookup-only`: Boolean?
}
