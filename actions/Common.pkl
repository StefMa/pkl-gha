/// Actions for managing common things in GitHub workflows.
/// This module is a low-level module not indended for direct use.
/// Use the [Action](../Action) module instead to access these actions.
@ModuleInfo { minPklVersion = "0.25.3" }
module com.github.action.actions.Common
import "../Workflow.pkl"

/// Type-safe GitHub Action of the [checkout](https://github.com/actions/checkout) action.
class Checkout extends Workflow.Step {
  uses = "actions/checkout@v4"

  hidden repository: (String|Number|Boolean)?
  hidden ref: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden sshKey: (String|Number|Boolean)?
  hidden sshKnownHosts: (String|Number|Boolean)?
  hidden sshStrict: (String|Number|Boolean)?
  hidden sshUser: (String|Number|Boolean)?
  hidden persistCredentials: (String|Number|Boolean)?
  hidden path: (String|Number|Boolean)?
  hidden clean: (String|Number|Boolean)?
  hidden filter: (String|Number|Boolean)?
  hidden sparseCheckout: (String|Number|Boolean)?
  hidden sparseCheckoutConeMode: (String|Number|Boolean)?
  hidden fetchDepth: (String|Number|Boolean)?
  hidden fetchTags: (String|Number|Boolean)?
  hidden showProgress: (String|Number|Boolean)?
  hidden lfs: (String|Number|Boolean)?
  hidden submodules: (String|Number|Boolean)?
  hidden setSafeDirectory: (String|Number|Boolean)?
  hidden githubServerUrl: (String|Number|Boolean)?
  local localWith = new Mapping {
    ["repository"] = repository
    ["ref"] = ref
    ["token"] = token
    ["ssh-key"] = sshKey
    ["ssh-known-hosts"] = sshKnownHosts
    ["ssh-strict"] = sshStrict
    ["ssh-user"] = sshUser
    ["persist-credentials"] = persistCredentials
    ["path"] = path
    ["clean"] = clean
    ["filter"] = filter
    ["sparse-checkout"] = sparseCheckout
    ["sparse-checkout-cone-mode"] = sparseCheckoutConeMode
    ["fetch-depth"] = fetchDepth
    ["fetch-tags"] = fetchTags
    ["show-progress"] = showProgress
    ["lfs"] = lfs
    ["submodules"] = submodules
    ["set-safe-directory"] = setSafeDirectory
    ["github-server-url"] = githubServerUrl
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/add-to-project](https://github.com/actions/add-to-project) action.
class AddToProject extends Workflow.Step {
  uses = "actions/add-to-project@v1"

  hidden javaVersion: (String|Number|Boolean)?
  hidden projectUrl: (String|Number|Boolean)?
  hidden githubToken: (String|Number|Boolean)?
  hidden labeled: (String|Number|Boolean)?
  hidden labelOperator: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["java-version"] = javaVersion
    ["project-url"] = projectUrl
    ["github-token"] = githubToken
    ["labeled"] = labeled
    ["label-operator"] = labelOperator
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class GoDependencySubmission extends Workflow.Step {
  uses = "actions/go-dependency-submission@v2"

  hidden token: (String|Number|Boolean)?
  hidden metadata: (String|Number|Boolean)?
  hidden goModPath: (String|Number|Boolean)?
  hidden goBuildTarget: (String|Number|Boolean)?
  hidden snapshotSha: (String|Number|Boolean)?
  hidden snapshotRef: (String|Number|Boolean)?
  hidden detectorName: (String|Number|Boolean)?
  hidden detectorVersion: (String|Number|Boolean)?
  hidden detectorUrl: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["token"] = token
    ["metadata"] = metadata
    ["go-mod-path"] = goModPath
    ["go-build-target"] = goBuildTarget
    ["snapshot-sha"] = snapshotSha
    ["snapshot-ref"] = snapshotRef
    ["detector-name"] = detectorName
    ["detector-version"] = detectorVersion
    ["detector-url"] = detectorUrl
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/github-script](https://github.com/actions/github-script) action.
class GitHubScript extends Workflow.Step {
  uses = "actions/github-script@v7"

  hidden script: (String|Number|Boolean)?
  hidden githubToken: (String|Number|Boolean)?
  hidden debug: (String|Number|Boolean)?
  hidden userAgent: (String|Number|Boolean)?
  hidden previews: (String|Number|Boolean)?
  hidden resultEncoding: (String|Number|Boolean)?
  hidden retries: (String|Number|Boolean)?
  hidden retryExemptStatusCodes: (String|Number|Boolean)?
  hidden baseUrl: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["script"] = script
    ["github-token"] = githubToken
    ["debug"] = debug
    ["user-agent"] = userAgent
    ["previews"] = previews
    ["result-encoding"] = resultEncoding
    ["retries"] = retries
    ["retry-exempt-status-codes"] = retryExemptStatusCodes
    ["base-url"] = baseUrl
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/labeler](https://github.com/actions/labeler) action.
class Labeler extends Workflow.Step {
  uses = "actions/labeler@v5"

  hidden repoToken: (String|Number|Boolean)?
  hidden configurationPath: (String|Number|Boolean)?
  hidden syncLabels: (String|Number|Boolean)?
  hidden dot: (String|Number|Boolean)?
  hidden prNumber: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["repo-token"] = repoToken
    ["configuration-path"] = configurationPath
    ["sync-labels"] = syncLabels
    ["dot"] = dot
    ["pr-number"] = prNumber
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class AttestSbom extends Workflow.Step {
  uses = "attest-sbom@v2"

  hidden sbomPath: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["sbom-path"] = sbomPath
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/ai-inference](https://github.com/actions/ai-inference) action.
class AiInference extends Workflow.Step {
  uses = "actions/ai-inference@v1"

  hidden prompt: (String|Number|Boolean)?
  hidden promptFile: (String|Number|Boolean)?
  hidden model: (String|Number|Boolean)?
  hidden endpoint: (String|Number|Boolean)?
  hidden systemPrompt: (String|Number|Boolean)?
  hidden systemPromptFile: (String|Number|Boolean)?
  hidden maxTokens: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["prompt"] = prompt
    ["prompt-file"] = promptFile
    ["model"] = model
    ["endpoint"] = endpoint
    ["system-prompt"] = systemPrompt
    ["system-prompt-file"] = systemPromptFile
    ["max-tokens"] = maxTokens
    ["token"] = token
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/create-github-app-token](https://github.com/actions/create-github-app-token) action.
class CreateGitHubAppToken extends Workflow.Step {
  uses = "actions/create-github-app-token@v2"

  hidden appId: (String|Number|Boolean)?
  hidden privateKey: (String|Number|Boolean)?
  hidden owner: (String|Number|Boolean)?
  hidden repositories: (String|Number|Boolean)?
  hidden skipTokenRevoke: (String|Number|Boolean)?
  hidden githubApiUrl: (String|Number|Boolean)?
  hidden permissionActions: (String|Number|Boolean)?
  hidden permissionAdministration: (String|Number|Boolean)?
  hidden permissionChecks: (String|Number|Boolean)?
  hidden permissionCodespaces: (String|Number|Boolean)?
  hidden permissionContents: (String|Number|Boolean)?
  hidden permissionDependabotSecrets: (String|Number|Boolean)?
  hidden permissionDeployments: (String|Number|Boolean)?
  hidden permissionEmailAddresses: (String|Number|Boolean)?
  hidden permissionEnvironments: (String|Number|Boolean)?
  hidden permissionFollowers: (String|Number|Boolean)?
  hidden permissionGitSshKeys: (String|Number|Boolean)?
  hidden permissionGpgKeys: (String|Number|Boolean)?
  hidden permissionInteractionLimits: (String|Number|Boolean)?
  hidden permissionIssues: (String|Number|Boolean)?
  hidden permissionMembers: (String|Number|Boolean)?
  hidden permissionMetadata: (String|Number|Boolean)?
  hidden permissionOrganizationAdministration: (String|Number|Boolean)?
  hidden permissionOrganizationAnnouncementBanners: (String|Number|Boolean)?
  hidden permissionOrganizationCopilotSeatManagement: (String|Number|Boolean)?
  hidden permissionOrganizationCustomOrgRoles: (String|Number|Boolean)?
  hidden permissionOrganizationCustomProperties: (String|Number|Boolean)?
  hidden permissionOrganizationCustomRoles: (String|Number|Boolean)?
  hidden permissionOrganizationEvents: (String|Number|Boolean)?
  hidden permissionOrganizationHooks: (String|Number|Boolean)?
  hidden permissionOrganizationPackages: (String|Number|Boolean)?
  hidden permissionOrganizationPersonalAccessTokenRequests: (String|Number|Boolean)?
  hidden permissionOrganizationPersonalAccessTokens: (String|Number|Boolean)?
  hidden permissionOrganizationPlan: (String|Number|Boolean)?
  hidden permissionOrganizationProjects: (String|Number|Boolean)?
  hidden permissionOrganizationSecrets: (String|Number|Boolean)?
  hidden permissionOrganizationSelfHostedRunners: (String|Number|Boolean)?
  hidden permissionOrganizationUserBlocking: (String|Number|Boolean)?
  hidden permissionPackages: (String|Number|Boolean)?
  hidden permissionPages: (String|Number|Boolean)?
  hidden permissionProfile: (String|Number|Boolean)?
  hidden permissionPullRequests: (String|Number|Boolean)?
  hidden permissionRepositoryCustomProperties: (String|Number|Boolean)?
  hidden permissionRepositoryHooks: (String|Number|Boolean)?
  hidden permissionRepositoryProjects: (String|Number|Boolean)?
  hidden permissionSecretScanningAlerts: (String|Number|Boolean)?
  hidden permissionSecrets: (String|Number|Boolean)?
  hidden permissionSecurityEvents: (String|Number|Boolean)?
  hidden permissionSingleFile: (String|Number|Boolean)?
  hidden permissionStarring: (String|Number|Boolean)?
  hidden permissionStatuses: (String|Number|Boolean)?
  hidden permissionTeamDiscussions: (String|Number|Boolean)?
  hidden permissionVulnerabilityAlerts: (String|Number|Boolean)?
  hidden permissionWorkflows: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["app-id"] = appId
    ["private-key"] = privateKey
    ["owner"] = owner
    ["repositories"] = repositories
    ["skip-token-revoke"] = skipTokenRevoke
    ["github-api-url"] = githubApiUrl
    ["permission-actions"] = permissionActions
    ["permission-administration"] = permissionAdministration
    ["permission-checks"] = permissionChecks
    ["permission-codespaces"] = permissionCodespaces
    ["permission-contents"] = permissionContents
    ["permission-dependabot-secrets"] = permissionDependabotSecrets
    ["permission-deployments"] = permissionDeployments
    ["permission-email-addresses"] = permissionEmailAddresses
    ["permission-environments"] = permissionEnvironments
    ["permission-followers"] = permissionFollowers
    ["permission-git-ssh-keys"] = permissionGitSshKeys
    ["permission-gpg-keys"] = permissionGpgKeys
    ["permission-interaction-limits"] = permissionInteractionLimits
    ["permission-issues"] = permissionIssues
    ["permission-members"] = permissionMembers
    ["permission-metadata"] = permissionMetadata
    ["permission-organization-administration"] = permissionOrganizationAdministration
    ["permission-organization-announcement-banners"] = permissionOrganizationAnnouncementBanners
    ["permission-organization-copilot-seat-management"] = permissionOrganizationCopilotSeatManagement
    ["permission-organization-custom-org-roles"] = permissionOrganizationCustomOrgRoles
    ["permission-organization-custom-properties"] = permissionOrganizationCustomProperties
    ["permission-organization-custom-roles"] = permissionOrganizationCustomRoles
    ["permission-organization-events"] = permissionOrganizationEvents
    ["permission-organization-hooks"] = permissionOrganizationHooks
    ["permission-organization-packages"] = permissionOrganizationPackages
    ["permission-organization-personal-access-token-requests"] = permissionOrganizationPersonalAccessTokenRequests
    ["permission-organization-personal-access-tokens"] = permissionOrganizationPersonalAccessTokens
    ["permission-organization-plan"] = permissionOrganizationPlan
    ["permission-organization-projects"] = permissionOrganizationProjects
    ["permission-organization-secrets"] = permissionOrganizationSecrets
    ["permission-organization-self-hosted-runners"] = permissionOrganizationSelfHostedRunners
    ["permission-organization-user-blocking"] = permissionOrganizationUserBlocking
    ["permission-packages"] = permissionPackages
    ["permission-pages"] = permissionPages
    ["permission-profile"] = permissionProfile
    ["permission-pull-requests"] = permissionPullRequests
    ["permission-repository-custom-properties"] = permissionRepositoryCustomProperties
    ["permission-repository-hooks"] = permissionRepositoryHooks
    ["permission-repository-projects"] = permissionRepositoryProjects
    ["permission-secret-scanning-alerts"] = permissionSecretScanningAlerts
    ["permission-secrets"] = permissionSecrets
    ["permission-security-events"] = permissionSecurityEvents
    ["permission-single-file"] = permissionSingleFile
    ["permission-starring"] = permissionStarring
    ["permission-statuses"] = permissionStatuses
    ["permission-team-discussions"] = permissionTeamDiscussions
    ["permission-vulnerability-alerts"] = permissionVulnerabilityAlerts
    ["permission-workflows"] = permissionWorkflows
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/delete-package-versions](https://github.com/actions/delete-package-versions) action.
class DeletePackageVersion extends Workflow.Step {
  uses = "actions/delete-package-versions@v5"

  hidden packageVersionIds: (String|Number|Boolean)?
  hidden owner: (String|Number|Boolean)?
  hidden packageName: (String|Number|Boolean)?
  hidden packageType: (String|Number|Boolean)?
  hidden numOldVersionsToDelete: (String|Number|Boolean)?
  hidden minVersionsToKeep: (String|Number|Boolean)?
  hidden ignoreVersions: (String|Number|Boolean)?
  hidden deleteOnlyPreReleaseVersions: (String|Number|Boolean)?
  hidden deleteOnlyUntaggedVersions: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["package-version-ids"] = packageVersionIds
    ["owner"] = owner
    ["package-name"] = packageName
    ["package-type"] = packageType
    ["num-old-versions-to-delete"] = numOldVersionsToDelete
    ["min-versions-to-keep"] = minVersionsToKeep
    ["ignore-versions"] = ignoreVersions
    ["delete-only-pre-release-versions"] = deleteOnlyPreReleaseVersions
    ["delete-only-untagged-versions"] = deleteOnlyUntaggedVersions
    ["token"] = token
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/stale](https://github.com/actions/stale) action.
class Stale extends Workflow.Step {
  uses = "actions/stale@v9"

  hidden repoToken: (String|Number|Boolean)?
  hidden staleIssueMessage: (String|Number|Boolean)?
  hidden stalePrMessage: (String|Number|Boolean)?
  hidden closeIssueMessage: (String|Number|Boolean)?
  hidden closePrMessage: (String|Number|Boolean)?
  hidden daysBeforeStale: (String|Number|Boolean)?
  hidden daysBeforeIssueStale: (String|Number|Boolean)?
  hidden daysBeforePrStale: (String|Number|Boolean)?
  hidden daysBeforeClose: (String|Number|Boolean)?
  hidden daysBeforeIssueClose: (String|Number|Boolean)?
  hidden daysBeforePrClose: (String|Number|Boolean)?
  hidden staleIssueLabel: (String|Number|Boolean)?
  hidden closeIssueLabel: (String|Number|Boolean)?
  hidden exemptIssueLabels: (String|Number|Boolean)?
  hidden closeIssueReason: (String|Number|Boolean)?
  hidden stalePrLabel: (String|Number|Boolean)?
  hidden closePrLabel: (String|Number|Boolean)?
  hidden exemptPrLabels: (String|Number|Boolean)?
  hidden exemptMilestones: (String|Number|Boolean)?
  hidden exemptIssueMilestones: (String|Number|Boolean)?
  hidden exemptPrMilestones: (String|Number|Boolean)?
  hidden exemptAllMilestones: (String|Number|Boolean)?
  hidden exemptAllIssueMilestones: (String|Number|Boolean)?
  hidden exemptAllPrMilestones: (String|Number|Boolean)?
  hidden onlyLabels: (String|Number|Boolean)?
  hidden anyOfLabels: (String|Number|Boolean)?
  hidden anyOfIssueLabels: (String|Number|Boolean)?
  hidden anyOfPrLabels: (String|Number|Boolean)?
  hidden onlyIssueLabels: (String|Number|Boolean)?
  hidden onlyPrLabels: (String|Number|Boolean)?
  hidden operationsPerRun: (String|Number|Boolean)?
  hidden removeStaleWhenUpdated: (String|Number|Boolean)?
  hidden removeIssueStaleWhenUpdated: (String|Number|Boolean)?
  hidden removePrStaleWhenUpdated: (String|Number|Boolean)?
  hidden debugOnly: (String|Number|Boolean)?
  hidden ascending: (String|Number|Boolean)?
  hidden deleteBranch: (String|Number|Boolean)?
  hidden startDate: (String|Number|Boolean)?
  hidden exemptAssignees: (String|Number|Boolean)?
  hidden exemptIssueAssignees: (String|Number|Boolean)?
  hidden exemptPrAssignees: (String|Number|Boolean)?
  hidden exemptAllAssignees: (String|Number|Boolean)?
  hidden exemptAllIssueAssignees: (String|Number|Boolean)?
  hidden exemptAllPrAssignees: (String|Number|Boolean)?
  hidden exemptDraftPr: (String|Number|Boolean)?
  hidden enableStatistics: (String|Number|Boolean)?
  hidden labelsToAddWhenUnstale: (String|Number|Boolean)?
  hidden labelsToRemoveWhenStale: (String|Number|Boolean)?
  hidden labelsToRemoveWhenUnstale: (String|Number|Boolean)?
  hidden ignoreUpdates: (String|Number|Boolean)?
  hidden ignoreIssueUpdates: (String|Number|Boolean)?
  hidden ignorePrUpdates: (String|Number|Boolean)?
  hidden includeOnlyAssigned: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["repo-token"] = repoToken
    ["stale-issue-message"] = staleIssueMessage
    ["stale-pr-message"] = stalePrMessage
    ["close-issue-message"] = closeIssueMessage
    ["close-pr-message"] = closePrMessage
    ["days-before-stale"] = daysBeforeStale
    ["days-before-issue-stale"] = daysBeforeIssueStale
    ["days-before-pr-stale"] = daysBeforePrStale
    ["days-before-close"] = daysBeforeClose
    ["days-before-issue-close"] = daysBeforeIssueClose
    ["days-before-pr-close"] = daysBeforePrClose
    ["stale-issue-label"] = staleIssueLabel
    ["close-issue-label"] = closeIssueLabel
    ["exempt-issue-labels"] = exemptIssueLabels
    ["close-issue-reason"] = closeIssueReason
    ["stale-pr-label"] = stalePrLabel
    ["close-pr-label"] = closePrLabel
    ["exempt-pr-labels"] = exemptPrLabels
    ["exempt-milestones"] = exemptMilestones
    ["exempt-issue-milestones"] = exemptIssueMilestones
    ["exempt-pr-milestones"] = exemptPrMilestones
    ["exempt-all-milestones"] = exemptAllMilestones
    ["exempt-all-issue-milestones"] = exemptAllIssueMilestones
    ["exempt-all-pr-milestones"] = exemptAllPrMilestones
    ["only-labels"] = onlyLabels
    ["any-of-labels"] = anyOfLabels
    ["any-of-issue-labels"] = anyOfIssueLabels
    ["any-of-pr-labels"] = anyOfPrLabels
    ["only-issue-labels"] = onlyIssueLabels
    ["only-pr-labels"] = onlyPrLabels
    ["operations-per-run"] = operationsPerRun
    ["remove-stale-when-updated"] = removeStaleWhenUpdated
    ["remove-issue-stale-when-updated"] = removeIssueStaleWhenUpdated
    ["remove-pr-stale-when-updated"] = removePrStaleWhenUpdated
    ["debug-only"] = debugOnly
    ["ascending"] = ascending
    ["delete-branch"] = deleteBranch
    ["start-date"] = startDate
    ["exempt-assignees"] = exemptAssignees
    ["exempt-issue-assignees"] = exemptIssueAssignees
    ["exempt-pr-assignees"] = exemptPrAssignees
    ["exempt-all-assignees"] = exemptAllAssignees
    ["exempt-all-issue-assignees"] = exemptAllIssueAssignees
    ["exempt-all-pr-assignees"] = exemptAllPrAssignees
    ["exempt-draft-pr"] = exemptDraftPr
    ["enable-statistics"] = enableStatistics
    ["labels-to-add-when-unstale"] = labelsToAddWhenUnstale
    ["labels-to-remove-when-stale"] = labelsToRemoveWhenStale
    ["labels-to-remove-when-unstale"] = labelsToRemoveWhenUnstale
    ["ignore-updates"] = ignoreUpdates
    ["ignore-issue-updates"] = ignoreIssueUpdates
    ["ignore-pr-updates"] = ignorePrUpdates
    ["include-only-assigned"] = includeOnlyAssigned
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [actions/dependency-review-action](https://github.com/actions/dependency-review-action) action.
class DependencyReviewAction extends Workflow.Step {
  uses = "actions/dependency-review-action@v4"

  hidden repoToken: (String|Number|Boolean)?
  hidden failOnSeverity: (String|Number|Boolean)?
  hidden failOnScopes: (String|Number|Boolean)?
  hidden baseRef: (String|Number|Boolean)?
  hidden headRef: (String|Number|Boolean)?
  hidden configFile: (String|Number|Boolean)?
  hidden allowLicenses: (String|Number|Boolean)?
  hidden denyLicenses: (String|Number|Boolean)?
  hidden allowDependenciesLicenses: (String|Number|Boolean)?
  hidden allowGhsas: (String|Number|Boolean)?
  hidden externalRepoToken: (String|Number|Boolean)?
  hidden licenseCheck: (String|Number|Boolean)?
  hidden vulnerabilityCheck: (String|Number|Boolean)?
  hidden commentSummaryInPr: (String|Number|Boolean)?
  hidden denyPackages: (String|Number|Boolean)?
  hidden denyGroups: (String|Number|Boolean)?
  hidden retryOnSnapshotWarnings: (String|Number|Boolean)?
  hidden retryOnSnapshotWarningsTimeout: (String|Number|Boolean)?
  hidden warnOnly: (String|Number|Boolean)?
  hidden showOpenssfScorecard: (String|Number|Boolean)?
  hidden warnOnOpenssfScorecardLevel: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["repo-token"] = repoToken
    ["fail-on-severity"] = failOnSeverity
    ["fail-on-scopes"] = failOnScopes
    ["base-ref"] = baseRef
    ["head-ref"] = headRef
    ["config-file"] = configFile
    ["allow-licenses"] = allowLicenses
    ["deny-licenses"] = denyLicenses
    ["allow-dependencies-licenses"] = allowDependenciesLicenses
    ["allow-ghsas"] = allowGhsas
    ["external-repo-token"] = externalRepoToken
    ["license-check"] = licenseCheck
    ["vulnerability-check"] = vulnerabilityCheck
    ["comment-summary-in-pr"] = commentSummaryInPr
    ["deny-packages"] = denyPackages
    ["deny-groups"] = denyGroups
    ["retry-on-snapshot-warnings"] = retryOnSnapshotWarnings
    ["retry-on-snapshot-warnings-timeout"] = retryOnSnapshotWarningsTimeout
    ["warn-only"] = warnOnly
    ["show-openssf-scorecard"] = showOpenssfScorecard
    ["warn-on-openssf-scorecard-level"] = warnOnOpenssfScorecardLevel
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
