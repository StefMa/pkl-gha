/// Actions for managing "setup-programming language"" in GitHub workflows.
/// This module is a low-level module not indended for direct use.
/// Use the [Action](../Action) module instead to access these actions.
@ModuleInfo { minPklVersion = "0.25.3" }
module com.github.action.actions.Setup
import "../Workflow.pkl"

/// Type-safe GitHub Action of the [setup-java](https://github.com/actions/setup-java) action.
class Java extends Workflow.Step {
  uses = "actions/setup-java@v4"

  hidden javaVersion: (String|Number|Boolean)?
  hidden javaVersionFile: (String|Number|Boolean)?
  hidden distribution: (String|Number|Boolean)?
  hidden javaPackage: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?
  hidden jdkFile: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden serverId: (String|Number|Boolean)?
  hidden serverUsername: (String|Number|Boolean)?
  hidden serverPassword: (String|Number|Boolean)?
  hidden settingsPath: (String|Number|Boolean)?
  hidden overwriteSettings: (String|Number|Boolean)?
  hidden gpgPrivateKey: (String|Number|Boolean)?
  hidden gpgPassphrase: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden jobStatus: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden mvnToolchainId: (String|Number|Boolean)?
  hidden mvnToolchainVendor: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["java-version"] = javaVersion
    ["java-version-file"] = javaVersionFile
    ["distribution"] = distribution
    ["java-package"] = javaPackage
    ["architecture"] = architecture
    ["jdkFile"] = jdkFile
    ["check-latest"] = checkLatest
    ["server-id"] = serverId
    ["server-username"] = serverUsername
    ["server-password"] = serverPassword
    ["settings-path"] = settingsPath
    ["overwrite-settings"] = overwriteSettings
    ["gpg-private-key"] = gpgPrivateKey
    ["gpg-passphrase"] = gpgPassphrase
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["job-status"] = jobStatus
    ["token"] = token
    ["mvn-toolchain-id"] = mvnToolchainId
    ["mvn-toolchain-vendor"] = mvnToolchainVendor
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupJava: Java = new {}

/// Type-safe GitHub Action of the [setup-dotnet](https://github.com/actions/setup-dotnet) action.
class SetupDotnet extends Workflow.Step {
  uses = "actions/setup-dotnet@v4"

  hidden dotnetVersion: (String|Number|Boolean)?
  hidden dotnetQuality: (String|Number|Boolean)?
  hidden globalJsonFile: (String|Number|Boolean)?
  hidden sourceUrl: (String|Number|Boolean)?
  hidden owner: (String|Number|Boolean)?
  hidden configFile: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["dotnet-version"] = dotnetVersion
    ["dotnet-quality"] = dotnetQuality
    ["global-json-file"] = globalJsonFile
    ["source-url"] = sourceUrl
    ["owner"] = owner
    ["config-file"] = configFile
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupDotnet: SetupDotnet = new {}

/// Type-safe GitHub Action of the [setup-go](https//github.com/actions/setup-go) action.
class Go extends Workflow.Step {
  uses = "actions/setup-go@v5"

  hidden goVersion: (String|Number|Boolean)?
  hidden goVersionFile: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["go-version"] = goVersion
    ["go-version-file"] = goVersionFile
    ["check-latest"] = checkLatest
    ["token"] = token
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["architecture"] = architecture
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [setup-node](
class Node extends Workflow.Step {
  uses = "actions/setup-node@v4"

  hidden alwaysAuth: (String|Number|Boolean)?
  hidden nodeVersion: (String|Number|Boolean)?
  hidden nodeVersionFile: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden registryUrl: (String|Number|Boolean)?
  hidden scope: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden mirror: (String|Number|Boolean)?
  hidden mirrorToken: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["always-auth"] = alwaysAuth
    ["node-version"] = nodeVersion
    ["node-version-file"] = nodeVersionFile
    ["architecture"] = architecture
    ["check-latest"] = checkLatest
    ["registry-url"] = registryUrl
    ["scope"] = scope
    ["token"] = token
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["mirror"] = mirror
    ["mirror-token"] = mirrorToken
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [setup-python](https://github.com/actions/setup-python) action.
class Python extends Workflow.Step {
  uses = "actions/setup-python@v5"

  hidden pythonVersion: (String|Number|Boolean)?
  hidden pythonVersionFile: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden updateEnvironment: (String|Number|Boolean)?
  hidden allowPrereleases: (String|Number|Boolean)?
  hidden freethreaded: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["python-version"] = pythonVersion
    ["python-version-file"] = pythonVersionFile
    ["cache"] = cache
    ["architecture"] = architecture
    ["check-latest"] = checkLatest
    ["token"] = token
    ["cache-dependency-path"] = cacheDependencyPath
    ["update-environment"] = updateEnvironment
    ["allow-prereleases"] = allowPrereleases
    ["freethreaded"] = freethreaded
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
