import "Workflow.pkl"

class Java extends Workflow.Step {
  uses = "actions/setup-java@v4"

  hidden javaVersion: String?
  hidden javaVersionFile: String?
  hidden distribution: String?
  hidden javaPackage: String?
  hidden architecture: String?
  hidden jdkFile: String?
  hidden checkLatest: Boolean?
  hidden serverId: String?
  hidden serverUsername: String?
  hidden serverPassword: String?
  hidden settingsPath: String?
  hidden overwriteSettings: Boolean?
  hidden gpgPrivateKey: String?
  hidden gpgPassphrase: String?
  hidden cache: String?
  hidden cacheDependencyPath: String?
  hidden jobStatus: String?
  hidden token: String?
  hidden mvnToolchainId: String?
  hidden mvnToolchainVendor: String?

  local localWith = new Mapping {
    ["java-version"] = javaVersion
    ["java-version-file"] = javaVersionFile
    ["distribution"] = distribution
    ["java-package"] = javaPackage
    ["architecture"] = architecture
    ["jdkFile"] = jdkFile
    ["check-latest"] = checkLatest
    ["server-id"] = serverId
    ["server-username"] = serverUsername
    ["server-password"] = serverPassword
    ["settings-path"] = settingsPath
    ["overwrite-settings"] = overwriteSettings
    ["gpg-private-key"] = gpgPrivateKey
    ["gpg-passphrase"] = gpgPassphrase
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["job-status"] = jobStatus
    ["token"] = token
    ["mvn-toolchain-id"] = mvnToolchainId
    ["mvn-toolchain-vendor"] = mvnToolchainVendor
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupJava: Java = new {}

class SetupDotnet extends Workflow.Step {
  uses = "actions/setup-dotnet@v4"

  hidden dotnetVersion: String?
  hidden dotnetQuality: String?
  hidden globalJsonFile: String?
  hidden sourceUrl: String?
  hidden owner: String?
  hidden configFile: String?
  hidden cache: String?
  hidden cacheDependencyPath: String?

  local localWith = new Mapping {
    ["dotnet-version"] = dotnetVersion
    ["dotnet-quality"] = dotnetQuality
    ["global-json-file"] = globalJsonFile
    ["source-url"] = sourceUrl
    ["owner"] = owner
    ["config-file"] = configFile
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupDotnet: SetupDotnet = new {}

class Go extends Workflow.Step {
  uses = "actions/setup-go@v5"

  hidden goVersion: String?
  hidden goVersionFile: String?
  hidden checkLatest: Boolean?
  hidden token: String?
  hidden cache: Boolean?
  hidden cacheDependencyPath: String?
  hidden architecture: String?

  local localWith = new Mapping {
    ["go-version"] = goVersion
    ["go-version-file"] = goVersionFile
    ["check-latest"] = checkLatest
    ["token"] = token
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["architecture"] = architecture
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupGo: Go = new {}

class Node extends Workflow.Step {
  uses = "actions/setup-node@v4"

  hidden alwaysAuth: String?
  hidden nodeVersion: String?
  hidden nodeVersionFile: String?
  hidden architecture: String?
  hidden checkLatest: String?
  hidden registryUrl: String?
  hidden scope: String?
  hidden token: String?
  hidden cache: String?
  hidden cacheDependencyPath: String?
  hidden mirror: String?
  hidden mirrorToken: String?

  local localWith = new Mapping {
    ["always-auth"] = alwaysAuth
    ["node-version"] = nodeVersion
    ["node-version-file"] = nodeVersionFile
    ["architecture"] = architecture
    ["check-latest"] = checkLatest
    ["registry-url"] = registryUrl
    ["scope"] = scope
    ["token"] = token
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["mirror"] = mirror
    ["mirror-token"] = mirrorToken
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupNode: Node = new {}

class Python extends Workflow.Step {
  uses = "actions/setup-python@v5"

  hidden pythonVersion: String?
  hidden pythonVersionFile: String?
  hidden cache: String?
  hidden architecture: String?
  hidden checkLatest: Boolean?
  hidden token: String?
  hidden cacheDependencyPath: String?
  hidden updateEnvironment: Boolean?
  hidden allowPrereleases: Boolean?
  hidden freethreaded: Boolean?

  local localWith = new Mapping {
    ["python-version"] = pythonVersion
    ["python-version-file"] = pythonVersionFile
    ["cache"] = cache
    ["architecture"] = architecture
    ["check-latest"] = checkLatest
    ["token"] = token
    ["cache-dependency-path"] = cacheDependencyPath
    ["update-environment"] = updateEnvironment
    ["allow-prereleases"] = allowPrereleases
    ["freethreaded"] = freethreaded
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupPython: Python = new {}