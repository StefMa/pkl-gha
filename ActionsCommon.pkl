module com.github.action.ActionsCommon
import "Workflow.pkl"

class Checkout extends Workflow.Step {
  uses = "actions/checkout@v4"

  hidden repository: String?
  hidden ref: String?
  hidden token: String?
  hidden sshKey: String?
  hidden sshKnownHosts: String?
  hidden sshStrict: String?
  hidden sshUser: String?
  hidden persistCredentials: String?
  hidden path: String?
  hidden clean: String?
  hidden filter: String?
  hidden sparseCheckout: String?
  hidden sparseCheckoutConeMode: String?
  hidden fetchDepth: String?
  hidden fetchTags: String?
  hidden showProgress: String?
  hidden lfs: String?
  hidden submodules: String?
  hidden setSafeDirectory: String?
  hidden githubServerUrl: String?
  local localWith = new Mapping {
    ["repository"] = repository
    ["ref"] = ref
    ["token"] = token
    ["ssh-key"] = sshKey
    ["ssh-known-hosts"] = sshKnownHosts
    ["ssh-strict"] = sshStrict
    ["ssh-user"] = sshUser
    ["persist-credentials"] = persistCredentials
    ["path"] = path
    ["clean"] = clean
    ["filter"] = filter
    ["sparse-checkout"] = sparseCheckout
    ["sparse-checkout-cone-mode"] = sparseCheckoutConeMode
    ["fetch-depth"] = fetchDepth
    ["fetch-tags"] = fetchTags
    ["show-progress"] = showProgress
    ["lfs"] = lfs
    ["submodules"] = submodules
    ["set-safe-directory"] = setSafeDirectory
    ["github-server-url"] = githubServerUrl
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class AddToProject extends Workflow.Step {
  uses = "actions/add-to-project@v1"

  hidden javaVersion: String?
  hidden projectUrl: String?
  hidden githubToken: String?
  hidden labeled: String?
  hidden labelOperator: String?

  local localWith = new Mapping {
    ["hava-version"] = javaVersion
    ["project-url"] = projectUrl
    ["github-token"] = githubToken
    ["labeled"] = labeled
    ["label-operator"] = labelOperator
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class GoDependencySubmission extends Workflow.Step {
  uses = "actions/go-dependency-submission@v2"

  hidden token: String?
  hidden metadata: String?
  hidden goModPath: String?
  hidden goBuildTarget: String?
  hidden snapshotSha: String?
  hidden snapshotRef: String?
  hidden detectorName: String?
  hidden detectorVersion: String?
  hidden detectorUrl: String?

  local localWith = new Mapping {
    ["token"] = token
    ["metadata"] = metadata
    ["go-mod-path"] = goModPath
    ["go-build-target"] = goBuildTarget
    ["snapshot-sha"] = snapshotSha
    ["snapshot-ref"] = snapshotRef
    ["detector-name"] = detectorName
    ["detector-version"] = detectorVersion
    ["detector-url"] = detectorUrl
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class GitHubScript extends Workflow.Step {
  uses = "actions/github-script@v7"

  hidden script: String?
  hidden githubToken: String?
  hidden debug: String?
  hidden userAgent: String?
  hidden previews: String?
  hidden resultEncoding: String?
  hidden retries: String?
  hidden retryExemptStatusCodes: String?
  hidden baseUrl: String?

  local localWith = new Mapping {
    ["script"] = script
    ["github-token"] = githubToken
    ["debug"] = debug
    ["user-agent"] = userAgent
    ["previews"] = previews
    ["result-encoding"] = resultEncoding
    ["retries"] = retries
    ["retry-exempt-status-codes"] = retryExemptStatusCodes
    ["base-url"] = baseUrl
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class Labeler extends Workflow.Step {
  uses = "actions/labeler@v5"

  hidden repoToken: String?
  hidden configurationPath: String?
  hidden syncLabels: String?
  hidden dot: String?
  hidden prNumber: String?

  local localWith = new Mapping {
    ["repo-token"] = repoToken
    ["configuration-path"] = configurationPath
    ["sync-labels"] = syncLabels
    ["dot"] = dot
    ["pr-number"] = prNumber
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class AttestSbom extends Workflow.Step {
  uses = "attest-sbom@v2"

  hidden sbomPath: String?

  local localWith = new Mapping {
    ["sbom-path"] = sbomPath
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class AiInference extends Workflow.Step {
  uses = "actions/ai-inference@v1"

  hidden prompt: String?
  hidden promptFile: String?
  hidden model: String?
  hidden endpoint: String?
  hidden systemPrompt: String?
  hidden systemPromptFile: String?
  hidden maxTokens: String?
  hidden token: String?

  local localWith = new Mapping {
    ["prompt"] = prompt
    ["prompt-file"] = promptFile
    ["model"] = model
    ["endpoint"] = endpoint
    ["system-prompt"] = systemPrompt
    ["system-prompt-file"] = systemPromptFile
    ["max-tokens"] = maxTokens
    ["token"] = token
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class CreateGitHubAppToken extends Workflow.Step {
  uses = "actions/create-github-app-token@v2"

  hidden appId: String?
  hidden privateKey: String?
  hidden owner: String?
  hidden repositories: String?
  hidden skipTokenRevoke: String?
  hidden githubApiUrl: String?
  hidden permissionActions: String?
  hidden permissionAdministration: String?
  hidden permissionChecks: String?
  hidden permissionCodespaces: String?
  hidden permissionContents: String?
  hidden permissionDependabotSecrets: String?
  hidden permissionDeployments: String?
  hidden permissionEmailAddresses: String?
  hidden permissionEnvironments: String?
  hidden permissionFollowers: String?
  hidden permissionGitSshKeys: String?
  hidden permissionGpgKeys: String?
  hidden permissionInteractionLimits: String?
  hidden permissionIssues: String?
  hidden permissionMembers: String?
  hidden permissionMetadata: String?
  hidden permissionOrganizationAdministration: String?
  hidden permissionOrganizationAnnouncementBanners: String?
  hidden permissionOrganizationCopilotSeatManagement: String?
  hidden permissionOrganizationCustomOrgRoles: String?
  hidden permissionOrganizationCustomProperties: String?
  hidden permissionOrganizationCustomRoles: String?
  hidden permissionOrganizationEvents: String?
  hidden permissionOrganizationHooks: String?
  hidden permissionOrganizationPackages: String?
  hidden permissionOrganizationPersonalAccessTokenRequests: String?
  hidden permissionOrganizationPersonalAccessTokens: String?
  hidden permissionOrganizationPlan: String?
  hidden permissionOrganizationProjects: String?
  hidden permissionOrganizationSecrets: String?
  hidden permissionOrganizationSelfHostedRunners: String?
  hidden permissionOrganizationUserBlocking: String?
  hidden permissionPackages: String?
  hidden permissionPages: String?
  hidden permissionProfile: String?
  hidden permissionPullRequests: String?
  hidden permissionRepositoryCustomProperties: String?
  hidden permissionRepositoryHooks: String?
  hidden permissionRepositoryProjects: String?
  hidden permissionSecretScanningAlerts: String?
  hidden permissionSecrets: String?
  hidden permissionSecurityEvents: String?
  hidden permissionSingleFile: String?
  hidden permissionStarring: String?
  hidden permissionStatuses: String?
  hidden permissionTeamDiscussions: String?
  hidden permissionVulnerabilityAlerts: String?
  hidden permissionWorkflows: String?

  local localWith = new Mapping {
    ["app-id"] = appId
    ["private-key"] = privateKey
    ["owner"] = owner
    ["repositories"] = repositories
    ["skip-token-revoke"] = skipTokenRevoke
    ["github-api-url"] = githubApiUrl
    ["permission-actions"] = permissionActions
    ["permission-administration"] = permissionAdministration
    ["permission-checks"] = permissionChecks
    ["permission-codespaces"] = permissionCodespaces
    ["permission-contents"] = permissionContents
    ["permission-dependabot-secrets"] = permissionDependabotSecrets
    ["permission-deployments"] = permissionDeployments
    ["permission-email-addresses"] = permissionEmailAddresses
    ["permission-environments"] = permissionEnvironments
    ["permission-followers"] = permissionFollowers
    ["permission-git-ssh-keys"] = permissionGitSshKeys
    ["permission-gpg-keys"] = permissionGpgKeys
    ["permission-interaction-limits"] = permissionInteractionLimits
    ["permission-issues"] = permissionIssues
    ["permission-members"] = permissionMembers
    ["permission-metadata"] = permissionMetadata
    ["permission-organization-administration"] = permissionOrganizationAdministration
    ["permission-organization-announcement-banners"] = permissionOrganizationAnnouncementBanners
    ["permission-organization-copilot-seat-management"] = permissionOrganizationCopilotSeatManagement
    ["permission-organization-custom-org-roles"] = permissionOrganizationCustomOrgRoles
    ["permission-organization-custom-properties"] = permissionOrganizationCustomProperties
    ["permission-organization-custom-roles"] = permissionOrganizationCustomRoles
    ["permission-organization-events"] = permissionOrganizationEvents
    ["permission-organization-hooks"] = permissionOrganizationHooks
    ["permission-organization-packages"] = permissionOrganizationPackages
    ["permission-organization-personal-access-token-requests"] = permissionOrganizationPersonalAccessTokenRequests
    ["permission-organization-personal-access-tokens"] = permissionOrganizationPersonalAccessTokens
    ["permission-organization-plan"] = permissionOrganizationPlan
    ["permission-organization-projects"] = permissionOrganizationProjects
    ["permission-organization-secrets"] = permissionOrganizationSecrets
    ["permission-organization-self-hosted-runners"] = permissionOrganizationSelfHostedRunners
    ["permission-organization-user-blocking"] = permissionOrganizationUserBlocking
    ["permission-packages"] = permissionPackages
    ["permission-pages"] = permissionPages
    ["permission-profile"] = permissionProfile
    ["permission-pull-requests"] = permissionPullRequests
    ["permission-repository-custom-properties"] = permissionRepositoryCustomProperties
    ["permission-repository-hooks"] = permissionRepositoryHooks
    ["permission-repository-projects"] = permissionRepositoryProjects
    ["permission-secret-scanning-alerts"] = permissionSecretScanningAlerts
    ["permission-secrets"] = permissionSecrets
    ["permission-security-events"] = permissionSecurityEvents
    ["permission-single-file"] = permissionSingleFile
    ["permission-starring"] = permissionStarring
    ["permission-statuses"] = permissionStatuses
    ["permission-team-discussions"] = permissionTeamDiscussions
    ["permission-vulnerability-alerts"] = permissionVulnerabilityAlerts
    ["permission-workflows"] = permissionWorkflows
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class DeletePackageVersion extends Workflow.Step {
  uses = "actions/delete-package-versions@v5"

  hidden packageVersionIds: String?
  hidden owner: String?
  hidden packageName: String?
  hidden packageType: String?
  hidden numOldVersionsToDelete: String?
  hidden minVersionsToKeep: String?
  hidden ignoreVersions: String?
  hidden deleteOnlyPreReleaseVersions: String?
  hidden deleteOnlyUntaggedVersions: String?
  hidden token: String?

  local localWith = new Mapping {
    ["package-version-ids"] = packageVersionIds
    ["owner"] = owner
    ["package-name"] = packageName
    ["package-type"] = packageType
    ["num-old-versions-to-delete"] = numOldVersionsToDelete
    ["min-versions-to-keep"] = minVersionsToKeep
    ["ignore-versions"] = ignoreVersions
    ["delete-only-pre-release-versions"] = deleteOnlyPreReleaseVersions
    ["delete-only-untagged-versions"] = deleteOnlyUntaggedVersions
    ["token"] = token
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}


class Stale extends Workflow.Step {
  uses = "actions/stale@v9"

  hidden repoToken: String?
  hidden staleIssueMessage: String?
  hidden stalePrMessage: String?
  hidden closeIssueMessage: String?
  hidden closePrMessage: String?
  hidden daysBeforeStale: String?
  hidden daysBeforeIssueStale: String?
  hidden daysBeforePrStale: String?
  hidden daysBeforeClose: String?
  hidden daysBeforeIssueClose: String?
  hidden daysBeforePrClose: String?
  hidden staleIssueLabel: String?
  hidden closeIssueLabel: String?
  hidden exemptIssueLabels: String?
  hidden closeIssueReason: String?
  hidden stalePrLabel: String?
  hidden closePrLabel: String?
  hidden exemptPrLabels: String?
  hidden exemptMilestones: String?
  hidden exemptIssueMilestones: String?
  hidden exemptPrMilestones: String?
  hidden exemptAllMilestones: String?
  hidden exemptAllIssueMilestones: String?
  hidden exemptAllPrMilestones: String?
  hidden onlyLabels: String?
  hidden anyOfLabels: String?
  hidden anyOfIssueLabels: String?
  hidden anyOfPrLabels: String?
  hidden onlyIssueLabels: String?
  hidden onlyPrLabels: String?
  hidden operationsPerRun: String?
  hidden removeStaleWhenUpdated: String?
  hidden removeIssueStaleWhenUpdated: String?
  hidden removePrStaleWhenUpdated: String?
  hidden debugOnly: String?
  hidden ascending: String?
  hidden deleteBranch: String?
  hidden startDate: String?
  hidden exemptAssignees: String?
  hidden exemptIssueAssignees: String?
  hidden exemptPrAssignees: String?
  hidden exemptAllAssignees: String?
  hidden exemptAllIssueAssignees: String?
  hidden exemptAllPrAssignees: String?
  hidden exemptDraftPr: String?
  hidden enableStatistics: String?
  hidden labelsToAddWhenUnstale: String?
  hidden labelsToRemoveWhenStale: String?
  hidden labelsToRemoveWhenUnstale: String?
  hidden ignoreUpdates: String?
  hidden ignoreIssueUpdates: String?
  hidden ignorePrUpdates: String?
  hidden includeOnlyAssigned: String?

  local localWith = new Mapping {
    ["repo-token"] = repoToken
    ["stale-issue-message"] = staleIssueMessage
    ["stale-pr-message"] = stalePrMessage
    ["close-issue-message"] = closeIssueMessage
    ["close-pr-message"] = closePrMessage
    ["days-before-stale"] = daysBeforeStale
    ["days-before-issue-stale"] = daysBeforeIssueStale
    ["days-before-pr-stale"] = daysBeforePrStale
    ["days-before-close"] = daysBeforeClose
    ["days-before-issue-close"] = daysBeforeIssueClose
    ["days-before-pr-close"] = daysBeforePrClose
    ["stale-issue-label"] = staleIssueLabel
    ["close-issue-label"] = closeIssueLabel
    ["exempt-issue-labels"] = exemptIssueLabels
    ["close-issue-reason"] = closeIssueReason
    ["stale-pr-label"] = stalePrLabel
    ["close-pr-label"] = closePrLabel
    ["exempt-pr-labels"] = exemptPrLabels
    ["exempt-milestones"] = exemptMilestones
    ["exempt-issue-milestones"] = exemptIssueMilestones
    ["exempt-pr-milestones"] = exemptPrMilestones
    ["exempt-all-milestones"] = exemptAllMilestones
    ["exempt-all-issue-milestones"] = exemptAllIssueMilestones
    ["exempt-all-pr-milestones"] = exemptAllPrMilestones
    ["only-labels"] = onlyLabels
    ["any-of-labels"] = anyOfLabels
    ["any-of-issue-labels"] = anyOfIssueLabels
    ["any-of-pr-labels"] = anyOfPrLabels
    ["only-issue-labels"] = onlyIssueLabels
    ["only-pr-labels"] = onlyPrLabels
    ["operations-per-run"] = operationsPerRun
    ["remove-stale-when-updated"] = removeStaleWhenUpdated
    ["remove-issue-stale-when-updated"] = removeIssueStaleWhenUpdated
    ["remove-pr-stale-when-updated"] = removePrStaleWhenUpdated
    ["debug-only"] = debugOnly
    ["ascending"] = ascending
    ["delete-branch"] = deleteBranch
    ["start-date"] = startDate
    ["exempt-assignees"] = exemptAssignees
    ["exempt-issue-assignees"] = exemptIssueAssignees
    ["exempt-pr-assignees"] = exemptPrAssignees
    ["exempt-all-assignees"] = exemptAllAssignees
    ["exempt-all-issue-assignees"] = exemptAllIssueAssignees
    ["exempt-all-pr-assignees"] = exemptAllPrAssignees
    ["exempt-draft-pr"] = exemptDraftPr
    ["enable-statistics"] = enableStatistics
    ["labels-to-add-when-unstale"] = labelsToAddWhenUnstale
    ["labels-to-remove-when-stale"] = labelsToRemoveWhenStale
    ["labels-to-remove-when-unstale"] = labelsToRemoveWhenUnstale
    ["ignore-updates"] = ignoreUpdates
    ["ignore-issue-updates"] = ignoreIssueUpdates
    ["ignore-pr-updates"] = ignorePrUpdates
    ["include-only-assigned"] = includeOnlyAssigned
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

class DependencyReviewAction extends Workflow.Step {
  uses = "actions/dependency-review-action@v4"

  hidden repoToken: String?
  hidden failOnSeverity: String?
  hidden failOnScopes: String?
  hidden baseRef: String?
  hidden headRef: String?
  hidden configFile: String?
  hidden allowLicenses: String?
  hidden denyLicenses: String?
  hidden allowDependenciesLicenses: String?
  hidden allowGhsas: String?
  hidden externalRepoToken: String?
  hidden licenseCheck: String?
  hidden vulnerabilityCheck: String?
  hidden commentSummaryInPr: String?
  hidden denyPackages: String?
  hidden denyGroups: String?
  hidden retryOnSnapshotWarnings: String?
  hidden retryOnSnapshotWarningsTimeout: String?
  hidden warnOnly: String?
  hidden showOpenssfScorecard: String?
  hidden warnOnOpenssfScorecardLevel: String?

  local localWith = new Mapping {
    ["repo-token"] = repoToken
    ["fail-on-severity"] = failOnSeverity
    ["fail-on-scopes"] = failOnScopes
    ["base-ref"] = baseRef
    ["head-ref"] = headRef
    ["config-file"] = configFile
    ["allow-licenses"] = allowLicenses
    ["deny-licenses"] = denyLicenses
    ["allow-dependencies-licenses"] = allowDependenciesLicenses
    ["allow-ghsas"] = allowGhsas
    ["external-repo-token"] = externalRepoToken
    ["license-check"] = licenseCheck
    ["vulnerability-check"] = vulnerabilityCheck
    ["comment-summary-in-pr"] = commentSummaryInPr
    ["deny-packages"] = denyPackages
    ["deny-groups"] = denyGroups
    ["retry-on-snapshot-warnings"] = retryOnSnapshotWarnings
    ["retry-on-snapshot-warnings-timeout"] = retryOnSnapshotWarningsTimeout
    ["warn-only"] = warnOnly
    ["show-openssf-scorecard"] = showOpenssfScorecard
    ["warn-on-openssf-scorecard-level"] = warnOnOpenssfScorecardLevel
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

